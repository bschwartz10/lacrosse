{"ast":null,"code":"var _jsxFileName = \"/Users/brettschwartz/Documents/code/fs-developer-project/src/components/GameLogsTable.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useTable, useSortBy } from 'react-table';\nimport season from '../data/season.json';\nimport moment from 'moment';\nimport { FaChevronDown, FaChevronUp } from 'react-icons/fa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GameLogsTable() {\n  _s();\n\n  const formattedData = season.gameLogs.map(game => {\n    return {\n      date: moment(game.startTime * 1000).format('l'),\n      team: 'WHP',\n      opponent: game.homeTeam.officialId === 'WHP' ? game.awayTeam.officialId : game.homeTeam.officialId,\n      gamesStarted: game.playerEventStats.gamesStarted,\n      goals: game.playerEventStats.goals,\n      onePointGoals: game.playerEventStats.onePointGoals,\n      twoPointGoals: game.playerEventStats.twoPointGoals,\n      assists: game.playerEventStats.assists,\n      penaltyMinutes: game.playerEventStats.pimValue,\n      points: game.playerEventStats.points,\n      shots: game.playerEventStats.shots,\n      shotsOnGoalPct: game.playerEventStats.shotsOnGoalPct.toFixed(3),\n      turnovers: game.playerEventStats.turnovers\n    };\n  });\n  const data = React.useMemo(() => formattedData, []);\n  const columns = React.useMemo(() => [{\n    Header: 'Date',\n    accessor: 'date',\n    sticky: 'left'\n  }, {\n    Header: 'Tm',\n    accessor: 'team'\n  }, {\n    Header: 'Opp',\n    accessor: 'opponent'\n  }, {\n    Header: 'GS',\n    accessor: 'gamesStarted'\n  }, {\n    Header: 'Goals',\n    accessor: 'goals'\n  }, {\n    Header: '1PG',\n    accessor: 'onePointGoals'\n  }, {\n    Header: '2PG',\n    accessor: 'twoPointGoals'\n  }, {\n    Header: 'Assists',\n    accessor: 'assists'\n  }, {\n    Header: 'PIM',\n    accessor: 'penaltyMinutes'\n  }, {\n    Header: 'Points',\n    accessor: 'points'\n  }, {\n    Header: 'Shots',\n    accessor: 'shots'\n  }, {\n    Header: 'SOG%',\n    accessor: 'shotsOnGoalPct'\n  }, {\n    Header: 'TO',\n    accessor: 'turnovers'\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }, useSortBy);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-container\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map((headerGroup, i) => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map((column, i) => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n            children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: column.isSorted ? column.isSortedDesc ? /*#__PURE__*/_jsxDEV(FaChevronDown, {\n                className: \"chevron\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 25\n              }, this) : /*#__PURE__*/_jsxDEV(FaChevronUp, {\n                className: \"chevron\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 25\n              }, this) : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 19\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this))\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map((cell, i) => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                style: {},\n                children: cell.render('Cell')\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 21\n              }, this);\n            })\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GameLogsTable, \"2M+cEGJjZRLIqxt38XQe/AMxJJk=\", false, function () {\n  return [useTable];\n});\n\n_c = GameLogsTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameLogsTable\");","map":{"version":3,"sources":["/Users/brettschwartz/Documents/code/fs-developer-project/src/components/GameLogsTable.js"],"names":["React","useTable","useSortBy","season","moment","FaChevronDown","FaChevronUp","GameLogsTable","formattedData","gameLogs","map","game","date","startTime","format","team","opponent","homeTeam","officialId","awayTeam","gamesStarted","playerEventStats","goals","onePointGoals","twoPointGoals","assists","penaltyMinutes","pimValue","points","shots","shotsOnGoalPct","toFixed","turnovers","data","useMemo","columns","Header","accessor","sticky","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","i","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useTable, useSortBy } from 'react-table'\nimport season from '../data/season.json'\nimport moment from 'moment'\nimport { FaChevronDown, FaChevronUp } from 'react-icons/fa'\n\nexport default function GameLogsTable() {\n  const formattedData = season.gameLogs.map((game) => {\n    return {\n      date: moment(game.startTime * 1000).format('l'),\n      team: 'WHP',\n      opponent: game.homeTeam.officialId === 'WHP' ? game.awayTeam.officialId : game.homeTeam.officialId,\n      gamesStarted: game.playerEventStats.gamesStarted,\n      goals: game.playerEventStats.goals,\n      onePointGoals: game.playerEventStats.onePointGoals,\n      twoPointGoals: game.playerEventStats.twoPointGoals,\n      assists: game.playerEventStats.assists,\n      penaltyMinutes: game.playerEventStats.pimValue,\n      points: game.playerEventStats.points,\n      shots: game.playerEventStats.shots,\n      shotsOnGoalPct: game.playerEventStats.shotsOnGoalPct.toFixed(3),\n      turnovers: game.playerEventStats.turnovers,\n    }\n  })\n\n  const data = React.useMemo(() => formattedData, [])\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Date',\n        accessor: 'date',\n        sticky: 'left',\n      },\n      {\n        Header: 'Tm',\n        accessor: 'team',\n      },\n      {\n        Header: 'Opp',\n        accessor: 'opponent',\n      },\n      {\n        Header: 'GS',\n        accessor: 'gamesStarted',\n      },\n      {\n        Header: 'Goals',\n        accessor: 'goals',\n      },\n      {\n        Header: '1PG',\n        accessor: 'onePointGoals',\n      },\n      {\n        Header: '2PG',\n        accessor: 'twoPointGoals',\n      },\n      {\n        Header: 'Assists',\n        accessor: 'assists',\n      },\n      {\n        Header: 'PIM',\n        accessor: 'penaltyMinutes',\n      },\n      {\n        Header: 'Points',\n        accessor: 'points',\n      },\n      {\n        Header: 'Shots',\n        accessor: 'shots',\n      },\n\n      {\n        Header: 'SOG%',\n        accessor: 'shotsOnGoalPct',\n      },\n      {\n        Header: 'TO',\n        accessor: 'turnovers',\n      },\n    ],\n    []\n  )\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable({ columns, data }, useSortBy)\n\n  return (\n    <div className=\"table-container\">\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup, i) => (\n            <tr key={i} {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column, i) => (\n                <th key={i} {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render('Header')}\n                  <span>\n                    {column.isSorted ? (\n                      column.isSortedDesc ? (\n                        <FaChevronDown className=\"chevron\" />\n                      ) : (\n                        <FaChevronUp className=\"chevron\" />\n                      )\n                    ) : (\n                      ''\n                    )}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr key={i} {...row.getRowProps()}>\n                {row.cells.map((cell, i) => {\n                  return (\n                    <td key={i} {...cell.getCellProps()} style={{}}>\n                      {cell.render('Cell')}\n                    </td>\n                  )\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}