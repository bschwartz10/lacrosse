{"ast":null,"code":"var _jsxFileName = \"/Users/brettschwartz/Documents/code/lacrosse/src/components/ConnectedScatterplot.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport * as d3 from 'd3';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ConnectedScatterplot() {\n  _s();\n\n  // set the dimensions and margins of the graph\n  const margin = {\n    top: 10,\n    right: 10,\n    bottom: 60,\n    left: 80\n  },\n        width = 600 - margin.left - margin.right,\n        height = 500 - margin.top - margin.bottom;\n\n  const renderChart = () => {\n    const svg = d3.select('#my_dataviz').append('svg').attr('viewBox', `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`);\n    const g = svg.append('g').attr('transform', `translate(${margin.left}, ${margin.top})`); // X label\n\n    g.append('text').attr('class', 'x axis-label').attr('x', width / 2).attr('y', height + 50).attr('font-size', '20px').attr('text-anchor', 'middle').text('Date'); // Y label\n\n    const yLabel = g.append('text').attr('class', 'y axis-label').attr('x', -(height / 2)).attr('y', -40).attr('font-size', '20px').attr('text-anchor', 'middle').attr('transform', 'rotate(-90)').text('Goals'); //Read the data\n\n    d3.json('data/season.json').then(data => {\n      const gameLogs = data.gameLogs.map(game => {\n        const tempTime = moment(new Date(game.startTime * 1000)).format('M/DD');\n        return {\n          startTime: game.startTime,\n          formattedStartTime: tempTime,\n          ...game.playerEventStats,\n          ...game\n        };\n      });\n      const selectOptions = ['goals', 'assists', 'points']; // add the options to the button\n\n      d3.select('.selectButton').selectAll('myOptions').data(selectOptions).enter().append('option').text(d => d) // text showed in the menu\n      .attr('value', d => d); // corresponding value returned by the button\n      // Add X axis\n\n      const x = d3.scaleBand().domain(gameLogs.map(game => game.formattedStartTime)).range([0, width]);\n      g.append('g').attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(x)); // Add Y axis\n\n      const y = d3.scaleLinear().domain([0, 10]).range([height, 0]);\n      g.append('g').call(d3.axisLeft(y)); // Initialize line with group a\n\n      const line = g.append('g').attr('transform', `translate(40, 0)`).append('path').datum(gameLogs).attr('d', d3.line().x(d => x(d.formattedStartTime)).y(d => y(+d.goals))).attr('stroke', 'black').style('stroke-width', 4).style('fill', 'none'); // Initialize dots with group a\n\n      const dot = g.append('g').attr('transform', `translate(40, 0)`).selectAll('circle').data(gameLogs).join('circle').attr('cx', d => x(d.formattedStartTime)).attr('cy', d => y(+d.goals)).attr('r', 7).style('fill', '#59c2b1'); // A function that update the chart\n\n      function update(selectedGroup) {\n        // Create new data with the selection\n        const dataFilter = gameLogs.map(function (d) {\n          return {\n            formattedStartTime: d.formattedStartTime,\n            value: d[selectedGroup]\n          };\n        }); // Give these new data to update line\n\n        line.datum(dataFilter).transition().duration(500).attr('d', d3.line().x(d => x(d.formattedStartTime)).y(d => y(+d.value))); // Give these new data to update dot\n\n        dot.data(dataFilter).transition().duration(500).attr('cx', d => x(d.formattedStartTime)).attr('cy', d => y(+d.value));\n        yLabel.text(selectedGroup.charAt(0).toUpperCase() + selectedGroup.slice(1));\n      } // // When the button is changed, run the updateChart function\n\n\n      d3.select('.selectButton').on('change', function (event, d) {\n        // recover the option that has been chosen\n        let selectedOption = d3.select(this).property('value'); // run the updateChart function with this selected option\n\n        update(selectedOption);\n      });\n    });\n  };\n\n  useEffect(() => {\n    renderChart();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-scatterplot\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"my_dataviz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select__container\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"selectButton\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ConnectedScatterplot, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = ConnectedScatterplot;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectedScatterplot\");","map":{"version":3,"sources":["/Users/brettschwartz/Documents/code/lacrosse/src/components/ConnectedScatterplot.js"],"names":["React","useEffect","d3","moment","ConnectedScatterplot","margin","top","right","bottom","left","width","height","renderChart","svg","select","append","attr","g","text","yLabel","json","then","data","gameLogs","map","game","tempTime","Date","startTime","format","formattedStartTime","playerEventStats","selectOptions","selectAll","enter","d","x","scaleBand","domain","range","call","axisBottom","y","scaleLinear","axisLeft","line","datum","goals","style","dot","join","update","selectedGroup","dataFilter","value","transition","duration","charAt","toUpperCase","slice","on","event","selectedOption","property"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport * as d3 from 'd3'\nimport moment from 'moment'\n\nexport default function ConnectedScatterplot() {\n  // set the dimensions and margins of the graph\n  const margin = { top: 10, right: 10, bottom: 60, left: 80 },\n    width = 600 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom\n\n  const renderChart = () => {\n    const svg = d3\n      .select('#my_dataviz')\n      .append('svg')\n      .attr('viewBox', `0 0 ${width + margin.left + margin.right} ${height + margin.top + margin.bottom}`)\n\n    const g = svg.append('g').attr('transform', `translate(${margin.left}, ${margin.top})`)\n\n    // X label\n    g.append('text')\n      .attr('class', 'x axis-label')\n      .attr('x', width / 2)\n      .attr('y', height + 50)\n      .attr('font-size', '20px')\n      .attr('text-anchor', 'middle')\n      .text('Date')\n\n    // Y label\n    const yLabel = g\n      .append('text')\n      .attr('class', 'y axis-label')\n      .attr('x', -(height / 2))\n      .attr('y', -40)\n      .attr('font-size', '20px')\n      .attr('text-anchor', 'middle')\n      .attr('transform', 'rotate(-90)')\n      .text('Goals')\n\n    //Read the data\n    d3.json('data/season.json').then((data) => {\n      const gameLogs = data.gameLogs.map((game) => {\n        const tempTime = moment(new Date(game.startTime * 1000)).format('M/DD')\n\n        return {\n          startTime: game.startTime,\n          formattedStartTime: tempTime,\n          ...game.playerEventStats,\n          ...game,\n        }\n      })\n\n      const selectOptions = ['goals', 'assists', 'points']\n\n      // add the options to the button\n      d3.select('.selectButton')\n        .selectAll('myOptions')\n        .data(selectOptions)\n        .enter()\n        .append('option')\n        .text((d) => d) // text showed in the menu\n        .attr('value', (d) => d) // corresponding value returned by the button\n\n      // Add X axis\n      const x = d3\n        .scaleBand()\n        .domain(gameLogs.map((game) => game.formattedStartTime))\n        .range([0, width])\n      g.append('g')\n        .attr('transform', 'translate(0,' + height + ')')\n        .call(d3.axisBottom(x))\n\n      // Add Y axis\n      const y = d3.scaleLinear().domain([0, 10]).range([height, 0])\n      g.append('g').call(d3.axisLeft(y))\n\n      // Initialize line with group a\n      const line = g\n        .append('g')\n        .attr('transform', `translate(40, 0)`)\n        .append('path')\n        .datum(gameLogs)\n        .attr(\n          'd',\n          d3\n            .line()\n            .x((d) => x(d.formattedStartTime))\n            .y((d) => y(+d.goals))\n        )\n        .attr('stroke', 'black')\n        .style('stroke-width', 4)\n        .style('fill', 'none')\n\n      // Initialize dots with group a\n      const dot = g\n        .append('g')\n        .attr('transform', `translate(40, 0)`)\n        .selectAll('circle')\n        .data(gameLogs)\n        .join('circle')\n        .attr('cx', (d) => x(d.formattedStartTime))\n        .attr('cy', (d) => y(+d.goals))\n        .attr('r', 7)\n        .style('fill', '#59c2b1')\n\n      // A function that update the chart\n      function update(selectedGroup) {\n        // Create new data with the selection\n        const dataFilter = gameLogs.map(function (d) {\n          return { formattedStartTime: d.formattedStartTime, value: d[selectedGroup] }\n        })\n\n        // Give these new data to update line\n        line\n          .datum(dataFilter)\n          .transition()\n          .duration(500)\n          .attr(\n            'd',\n            d3\n              .line()\n              .x((d) => x(d.formattedStartTime))\n              .y((d) => y(+d.value))\n          )\n        // Give these new data to update dot\n        dot\n          .data(dataFilter)\n          .transition()\n          .duration(500)\n          .attr('cx', (d) => x(d.formattedStartTime))\n          .attr('cy', (d) => y(+d.value))\n\n        yLabel.text(selectedGroup.charAt(0).toUpperCase() + selectedGroup.slice(1))\n      }\n\n      // // When the button is changed, run the updateChart function\n      d3.select('.selectButton').on('change', function (event, d) {\n        // recover the option that has been chosen\n        let selectedOption = d3.select(this).property('value')\n        // run the updateChart function with this selected option\n        update(selectedOption)\n      })\n    })\n  }\n\n  useEffect(() => {\n    renderChart()\n  }, [])\n\n  return (\n    <div className=\"connected-scatterplot\">\n      <div id=\"my_dataviz\"></div>\n      <div className=\"select__container\">\n        <select className=\"selectButton\"></select>\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}